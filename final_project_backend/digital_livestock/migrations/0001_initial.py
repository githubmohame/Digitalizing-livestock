# Generated by Django 4.1.3 on 2022-12-02 13:43

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='animal_sub_type',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('what_produce', models.CharField(max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='animal_type',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='city',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='governorate',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='place_type',
            fields=[
                ('name', models.CharField(max_length=30)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='section_type',
            fields=[
                ('name', models.CharField(max_length=30)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='village',
            fields=[
                ('name', models.CharField(max_length=20)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.city')),
            ],
        ),
        migrations.CreateModel(
            name='work_place',
            fields=[
                ('number_of_arc', models.SmallIntegerField(null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('number_of_workers', models.SmallIntegerField()),
                ('playground', models.SmallIntegerField()),
                ('wards', models.SmallIntegerField()),
                ('google_map', models.URLField(null=True)),
                ('place_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.place_type')),
                ('section_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.section_type')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.village')),
            ],
        ),
        migrations.AddField(
            model_name='city',
            name='governorate_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.governorate'),
        ),
        migrations.CreateModel(
            name='animals_in_work_place',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('animal_number', models.SmallIntegerField()),
                ('is_male', models.BooleanField()),
                ('animal_sub_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.animal_sub_type')),
                ('work_place_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.work_place')),
            ],
        ),
        migrations.AddField(
            model_name='animal_sub_type',
            name='animal_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.animal_type'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('ssn', models.CharField(max_length=13, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(regex='[1-9]{1,1}[0-9]{12,12}')])),
                ('name', models.CharField(max_length=30, validators=[django.core.validators.RegexValidator(regex='[a-zA-Z]')])),
                ('phone', models.CharField(max_length=12, validators=[django.core.validators.RegexValidator(regex='[0-9]{12,12}')])),
                ('photo', models.ImageField(upload_to='personal_images')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('village', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='digital_livestock.village')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='work_place',
            constraint=models.CheckConstraint(check=models.Q(('number_of_arc__gt', 0), ('number_of_workers__gt', 0), ('wards__gt', 0), ('playground__gt', 0)), name='positive_ck'),
        ),
    ]
